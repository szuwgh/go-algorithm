package can_jump

// 55. 跳跃游戏

// 给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。

// 判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。

// 示例 1：

// 输入：nums = [2,3,1,1,4]
// 输出：true
// 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
// 示例 2：

// 输入：nums = [3,2,1,0,4]
// 输出：false
// 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

// 代码解析
// 定义变量: furthest 用于记录当前能够到达的最远位置。初始值为 0。
// 遍历数组: 遍历 nums 数组的每一个元素。
// 判断是否能到达当前索引: 如果当前索引 i 大于 furthest，说明无法到达这个位置，直接返回 false。
// 更新最远位置: 如果当前索引 i 能够跳跃到 i+nums[i]，则更新 furthest。
// 检查是否可以到达最后一个下标: 如果 furthest 大于等于数组的最后一个索引 n-1，说明可以到达最后一个下标，返回 true。
// 完成遍历后判断: 如果遍历完成后 furthest 仍然小于 n-1，则返回 false。
// 这个贪心算法的时间复杂度是 O(n)，其中 n 是数组的长度。

func canJump(nums []int) bool {
	// 记录当前能够到达的最远位置
	furthest := 0
	n := len(nums)

	for i := 0; i < n; i++ {
		// 如果当前索引大于能够到达的最远位置，则无法到达
		if i > furthest {
			return false
		}
		// 更新能够到达的最远位置
		if i+nums[i] > furthest {
			furthest = i + nums[i]
		}
		// 如果能够到达最后一个下标，则直接返回 true
		if furthest >= n-1 {
			return true
		}
	}

	// 经过所有位置后，检查是否能够到达最后一个下标
	return furthest >= n-1
}
