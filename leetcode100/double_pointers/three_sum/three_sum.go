package main

import "sort"

// 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请你返回所有和为 0 且不重复的三元组。

// 注意：答案中不可以包含重复的三元组。

// 示例 1：

// 输入：nums = [-1,0,1,2,-1,-4]
// 输出：[[-1,-1,2],[-1,0,1]]
// 解释：
// nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
// nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
// nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
// 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
// 注意，输出的顺序和三元组的顺序并不重要。
// 示例 2：

// 输入：nums = [0,1,1]
// 输出：[]
// 解释：唯一可能的三元组和不为 0 。
// 示例 3：

// 输入：nums = [0,0,0]
// 输出：[[0,0,0]]
// 解释：唯一可能的三元组和为 0 。

// 要解决这个问题，可以使用双指针技巧来避免三重循环，从而优化时间复杂度。下面是解决方案的具体步骤：

// 首先对数组进行排序。
// 然后，固定一个数，利用双指针来寻找剩下的两个数，使它们的和为固定数的相反数。
// 在寻找过程中要跳过重复的数，以确保不包含重复的三元组。

// 代码解析
// 排序：对数组进行排序是为了方便使用双指针技巧。
// 固定一个数：遍历数组，将当前遍历的数视为第一个数，然后使用双指针法寻找剩余两个数。
// 双指针法：通过左指针和右指针来控制两个数的位置。如果三数之和等于 0，则将其加入结果集中，并跳过所有可能重复的元素以避免重复三元组。
// 时间复杂度：该算法的时间复杂度为 O(n^2)，其中 n 是数组的长度。这是因为外部循环遍历每一个数是 O(n)，内部使用双指针查找合适的数对是 O(n)，因此整体时间复杂度为 O(n^2)。

func threeSum(nums []int) [][]int {
	// 结果集
	var res [][]int
	// 先对数组进行排序
	sort.Ints(nums)

	// 遍历数组，固定一个数
	for i := 0; i < len(nums)-2; i++ {
		// 如果当前数和前一个数相同，跳过以避免重复
		if i > 0 && nums[i] == nums[i-1] {
			continue
		}
		// 使用双指针在 i 之后的数组部分寻找合适的两个数
		left, right := i+1, len(nums)-1
		for left < right {
			sum := nums[i] + nums[left] + nums[right]
			if sum == 0 {
				// 找到满足条件的三元组
				res = append(res, []int{nums[i], nums[left], nums[right]})
				// 跳过重复的左边数
				for left < right && nums[left] == nums[left+1] {
					left++
				}
				// 跳过重复的右边数
				for left < right && nums[right] == nums[right-1] {
					right--
				}
				// 移动双指针
				left++
				right--
			} else if sum < 0 {
				// 如果和小于0，移动左指针使得 sum 变大
				left++
			} else {
				// 如果和大于0，移动右指针使得 sum 变小
				right--
			}
		}
	}
	return res
}
